OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=26.09.14;
    Time=11:28:51;
    Modified=Yes;
    Version List=NAVW17.10,NAVRU7.10;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               END;

               InitRecord;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");

               DocSignMgt.SetDefaults(DATABASE::"Purchase Header","Document Type","No.");
             END;

    OnDelete=BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               PurchPost.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
               VALIDATE("Applies-to ID",'');

               DocSignMgt.DeleteDocSign(DATABASE::"Purchase Header","Document Type","No.");

               ApprovalMgt.DeleteApprovalEntry(DATABASE::"Purchase Header","Document Type","No.");
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN BEGIN
                 COMMIT;

                 IF PurchRcptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text000,TRUE,
                        PurchRcptHeader."No.")
                   THEN BEGIN
                     PurchRcptHeader.SETRECFILTER;
                     PurchRcptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text001,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeader.SETRECFILTER;
                     PurchInvHeader.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text002,TRUE,
                        PurchCrMemoHeader."No.")
                   THEN BEGIN
                     PurchCrMemoHeader.SETRECFILTER;
                     PurchCrMemoHeader.PrintRecords(TRUE);
                   END;

                 IF ReturnShptHeader."No." <> '' THEN
                   IF CONFIRM(
                        Text024,TRUE,
                        ReturnShptHeader."No.")
                   THEN BEGIN
                     ReturnShptHeader.SETRECFILTER;
                     ReturnShptHeader.PrintRecords(TRUE);
                   END;

                 IF PurchInvHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text042,TRUE,
                        PurchInvHeader."No.")
                   THEN BEGIN
                     PurchInvHeaderPrepmt.SETRECFILTER;
                     PurchInvHeaderPrepmt.PrintRecords(TRUE);
                   END;

                 IF PurchCrMemoHeaderPrepmt."No." <> '' THEN
                   IF CONFIRM(
                        Text043,TRUE,
                        PurchCrMemoHeaderPrepmt."No.")
                   THEN BEGIN
                     PurchCrMemoHeaderPrepmt.SETRECFILTER;
                     PurchCrMemoHeaderPrepmt.PrintRecords(TRUE);
                   END;
               END;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               RUS=????????? ?????];
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              RUS=??? ??????];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    RUS=?????????,?????,???,????-???,??? ?????,??????];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Vendor No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");
                                                                    PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF "Agreement No." <> '' THEN
                                                                  ERROR(Text12402,
                                                                    FIELDCAPTION("Buy-from Vendor No."),
                                                                    FIELDCAPTION("Agreement No."));

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                "Buy-from Address" := Vend.Address;
                                                                "Buy-from Address 2" := Vend."Address 2";
                                                                "Buy-from City" := Vend.City;
                                                                "Buy-from Post Code" := Vend."Post Code";
                                                                "Buy-from County" := Vend.County;
                                                                "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Vend."Tax Area Code";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                VALIDATE("Sell-to Customer No.",'');
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));

                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                VALIDATE("Order Address Code");

                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Buy-from Vendor No."));

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");

                                                                IF "Empl. Purchase" THEN
                                                                  "Vendor Invoice No." := "No.";
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              RUS=??? ??????] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              RUS=?????] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0');
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                IF "Agreement No." <> '' THEN
                                                                  ERROR(Text12402,
                                                                    FIELDCAPTION("Pay-to Vendor No."),
                                                                    FIELDCAPTION("Agreement No."));

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Vendor Posting Group");

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                "Pay-to Address" := Vend.Address;
                                                                "Pay-to Address 2" := Vend."Address 2";
                                                                "Pay-to City" := Vend.City;
                                                                "Pay-to Post Code" := Vend."Post Code";
                                                                "Pay-to County" := Vend.County;
                                                                "Pay-to Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Pay-to Vendor No."));

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              RUS=??? ??????? ??????];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=[ENU=Pay-to Name;
                                                              RUS=???????? ??????? ??????] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              RUS=???????? 2 ??????? ??????] }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=[ENU=Pay-to Address;
                                                              RUS=???? ??????? ??????] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              RUS=???? 2 ??????? ??????] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              RUS=??? ??????? ??????] }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=[ENU=Pay-to Contact;
                                                              RUS=????? ??????? ??????] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              RUS=??? ????] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Ship-to Name" := ShipToAddr.Name;
                                                                  "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                  "Ship-to Address" := ShipToAddr.Address;
                                                                  "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                  "Ship-to City" := ShipToAddr.City;
                                                                  "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                  "Ship-to County" := ShipToAddr.County;
                                                                  "Ship-to Country/Region Code" := ShipToAddr."Country/Region Code";
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Ship-to Name" := Cust.Name;
                                                                  "Ship-to Name 2" := Cust."Name 2";
                                                                  "Ship-to Address" := Cust.Address;
                                                                  "Ship-to Address 2" := Cust."Address 2";
                                                                  "Ship-to City" := Cust.City;
                                                                  "Ship-to Post Code" := Cust."Post Code";
                                                                  "Ship-to County" := Cust.County;
                                                                  "Ship-to Country/Region Code" := Cust."Country/Region Code";
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              RUS=??? ???????] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              RUS=???????? ???????] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              RUS=???????? 2 ???????] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              RUS=???? ???????] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              RUS=???? 2 ???????] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              RUS=??? ???????] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              RUS=????? ???????] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   CaptionML=[ENU=Order Date;
                                                              RUS=??? ??????] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                CheckCorrPostingDate;

                                                                VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;
                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              RUS=??? ???] }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              RUS=????????? ??? ??????] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              RUS=?????? ???] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              RUS=??? ????? ?????] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              RUS=?? ??????] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              RUS=?????? ?????? (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              RUS=??? ???? ??????] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              RUS=??? ???? ??????] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              RUS=??? ????] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              RUS=??? ??? ??????? 1];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              RUS=??? ??? ??????? 2];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              RUS=???? ???? ??????];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND (("Currency Code" = xRec."Currency Code") OR
                                                                   GLSetup."Enable Russian Accounting")
                                                                THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE BEGIN
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    IF PurchLinesExist THEN
                                                                      IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN BEGIN
                                                                        SetHideValidationDialog(TRUE);
                                                                        RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                        SetHideValidationDialog(FALSE);
                                                                      END ELSE
                                                                        ERROR(Text018,FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              RUS=??? ??????] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"));
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              RUS=???????? ???? ??????];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.InitOutstandingAmount;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              RUS=???? ? ??? ???] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              RUS=??? ???? ?? ????] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              RUS=??? ??] }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'<>%1&<>%2',ApprovalEntry.Status::Canceled,ApprovalEntry.Status::Rejected);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              RUS=??? ????????] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              RUS=????? ??????] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              RUS=????????];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              RUS=??? ?????????];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              RUS=?? ?????] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              RUS=????. ? ???. - ?];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    RUS=" ,????,???,????-???,????-???,???????????,????????"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnILine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              RUS=????. ? ???. - ?????] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              RUS=????? ??????. ???] }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              RUS=???????] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              RUS=???] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              RUS=????? ??????? ??????] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              RUS=???];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              RUS=??? ? ??? ???];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              RUS=????? ?????] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              RUS=???? ?????] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              RUS=????? ??????? ?????];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              RUS=???. ???? ?????];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              RUS=????? ?????? ??????] }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              RUS=????? ???. ????. ??????] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              RUS=????? ??? ??????] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              RUS=????? ????-???? ??????] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              RUS=???] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              RUS=??? ??????] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              RUS=??? ????] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN BEGIN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                    RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              RUS=???? ??????-????] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              RUS=??? ??????] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"));
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              RUS=??? ???????] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              RUS=??? ????/????? ???? ???] }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              RUS=???????? ??????] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              RUS=???????? 2 ??????] }
    { 81  ;   ;Buy-from Address    ;Text50        ;CaptionML=[ENU=Buy-from Address;
                                                              RUS=???? ??????] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=[ENU=Buy-from Address 2;
                                                              RUS=???? 2 ??????] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              RUS=??? ??????] }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=[ENU=Buy-from Contact;
                                                              RUS=????? ??????] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              RUS=?????? ??????? ??????] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              RUS=????? ??????? ??????] }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              RUS=??? ????/????? ??????? ??????] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              RUS=?????? ??????] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              RUS=????? ??????] }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              RUS=??? ????/????? ??????] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              RUS=?????? ???????] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              RUS=????? ???????] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              RUS=??? ????/????? ???????] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              RUS=??? ??????. ???];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    RUS=??? ??,???????? ???];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END
                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Address Code;
                                                              RUS=??? ???? ??????] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"));
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              RUS=??? ?????] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              RUS=????????] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              RUS=??? ??????] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area));
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              RUS=???????] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"));
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              RUS=???????? ??????] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              RUS=??? ??? ??????] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              RUS=???? ?????];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              RUS=???? ??? ?????] }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              RUS=???? ????? ?????] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              RUS=??? ????????? ??????] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              RUS=?????????? ???????] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              RUS=??? ??????-????] }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : Record 25;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              RUS=??? ????????] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    PurchLine.UpdateAmounts;
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              RUS=???? ??? - ???? (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              RUS=?????];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    RUS=?????,?????,??????? ???????,??????? ????????];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              RUS=????? ???? ?? ????];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    RUS=???,%,???];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              RUS=?????? ???? ?? ????];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              RUS=?????? ?????? ??] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              RUS=????? ??];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    RUS=???????,? ????????,???????];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              RUS=??? ??-????? - ??????];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              RUS=??? ??-????? - ??????];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              RUS=????????? ??];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    RUS=?????,????];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              RUS=????? ????????] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              RUS=????? ???. ????????] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              RUS=????? ????-???? ????????] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              RUS=????? ????-???? ?????. ?????.] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"));
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              RUS=??????? (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No. Series",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Prepmt. Inv. Nos.","Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              RUS=???? ????? ????????] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              RUS=????? ????????] }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              RUS=?? ????????] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No. Series",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Prepmt. Cr. Memo Nos.","Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              RUS=???? ????? ????-??? ????????] }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              RUS=?????? ??? ????????] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              RUS=??? ???? ????????] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              RUS=??? ????? ????????] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              RUS=?????? ???????? (%)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              RUS=????? ?????????];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              RUS=????? ???? ???];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    RUS=" ,??????????? ??? ????,????,??????"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              RUS=??? ????? ???? ???];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document" WHERE (Status=FILTER(New|Approved));
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              RUS=????? ????? ????? ??????] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              RUS=????? ?????];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              RUS=???? ?? ??????];
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              RUS=??? ????? ???????];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              RUS=??? ???? ?? ????];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              RUS=???-?? ?????? ????];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              RUS=??????? ????? ??????] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              RUS=??? ????????] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Buy-from Contact No." = '') AND ("Buy-from Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              RUS=??? ????? ??????] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Pay-to Contact No." = '') AND ("Pay-to Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Pay-to Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      InitRecord;
                                                                      "No. Series" := xRec."No. Series";
                                                                      IF xRec."Receiving No." <> '' THEN BEGIN
                                                                        "Receiving No. Series" := xRec."Receiving No. Series";
                                                                        "Receiving No." := xRec."Receiving No.";
                                                                      END;
                                                                      IF xRec."Posting No." <> '' THEN BEGIN
                                                                        "Posting No. Series" := xRec."Posting No. Series";
                                                                        "Posting No." := xRec."Posting No.";
                                                                      END;
                                                                      IF xRec."Return Shipment No." <> '' THEN BEGIN
                                                                        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
                                                                        "Return Shipment No." := xRec."Return Shipment No.";
                                                                      END;
                                                                      IF xRec."Prepayment No." <> '' THEN BEGIN
                                                                        "Prepayment No. Series" := xRec."Prepayment No. Series";
                                                                        "Prepayment No." := xRec."Prepayment No.";
                                                                      END;
                                                                      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
                                                                        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
                                                                      END;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN BEGIN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;
                                                              END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              RUS=??? ????? ??????? ??????] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(1,'',"Responsibility Center");
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              RUS=????? ??????????] }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              RUS=?????? ?????????];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              RUS=???-?? ????? ????] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              RUS=?????? ?? ????] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              RUS=????? ??? ?????] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"));
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              RUS=??????? ??? ??????] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"));
                                                              END;

                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              RUS=????? ????? ???????? ??????] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"));
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              RUS=??? ??. ????? ?? ????] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              RUS=?????? ?? ???] }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              RUS=??? ?????? ??????] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              RUS=????? ?????. ???. ?????????] }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              RUS=???? ????? ?????. ???. ?????????] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              RUS=??????] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              RUS=????? ??????? ?????. ???. ?????????];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              RUS=??? ???????] }
    { 12400;  ;Empl. Purchase      ;Boolean       ;CaptionML=[ENU=Empl. Purchase;
                                                              RUS=???????] }
    { 12401;  ;Advance Purpose     ;Text30        ;OnValidate=BEGIN
                                                                "Posting Description" := "Advance Purpose" +' ('+ "Pay-to Vendor No."+' )';
                                                              END;

                                                   CaptionML=[ENU=Advance Purpose;
                                                              RUS=???????? ?????] }
    { 12402;  ;Remaining/Overdraft Doc. No.;Code20;OnValidate=BEGIN
                                                                IF "Remaining/Overdraft Doc. No." = '' THEN
                                                                  EXIT;
                                                                VendLedgEntry.RESET;
                                                                VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                                VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                VendLedgEntry.SETRANGE("Document No.","Remaining/Overdraft Doc. No.");
                                                                IF NOT VendLedgEntry.FIND('-') THEN
                                                                  ERROR(Text12400,"Remaining/Overdraft Doc. No.","Pay-to Vendor No.");
                                                              END;

                                                   OnLookup=VAR
                                                              VendLedgEntries@1000000000 : Page 29;
                                                            BEGIN
                                                              VendLedgEntry.RESET;
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntries.SETTABLEVIEW(VendLedgEntry);
                                                              VendLedgEntries.LOOKUPMODE(TRUE);
                                                              IF VendLedgEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                VendLedgEntries.GETRECORD(VendLedgEntry);
                                                                "Remaining/Overdraft Doc. No." := VendLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(VendLedgEntries);
                                                            END;

                                                   CaptionML=[ENU=Remaining/Overdraft Doc. No.;
                                                              RUS=????? ?????? ????/???????] }
    { 12403;  ;Prepmt. Diff. Appln. Entry No.;Integer;
                                                   CaptionML=[ENU=Prepmt. Diff. Appln. Entry No.;
                                                              RUS=???. ????? ????. ??? ???????? ??.];
                                                   Editable=No }
    { 12404;  ;Prepmt. Diff.       ;Boolean       ;CaptionML=[ENU=Prepmt. Diff.;
                                                              RUS=?????? ?? ???????];
                                                   Editable=No }
    { 12437;  ;No. of Documents    ;Integer       ;CaptionML=[ENU=No. of Documents;
                                                              RUS=???-?? ??????] }
    { 12438;  ;No. of Pages        ;Integer       ;CaptionML=[ENU=No. of Pages;
                                                              RUS=???-?? ?????] }
    { 12440;  ;Corrective Document ;Boolean       ;OnValidate=BEGIN
                                                                IF ("Document Type" <> "Document Type"::Invoice) AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN
                                                                  FIELDERROR("Document Type");
                                                              END;

                                                   CaptionML=[ENU=Corrective Document;
                                                              RUS=????????? ??????] }
    { 12441;  ;Corrected Doc. Type ;Option        ;OnValidate=BEGIN
                                                                IF "Corrected Doc. Type" <> xRec."Corrected Doc. Type" THEN BEGIN
                                                                  PurchLine.RESET;
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(Text018,FIELDCAPTION("Corrected Doc. Type"));
                                                                  VALIDATE("Corrected Doc. No.",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Corrected Doc. Type;
                                                              RUS=??? ??????????? ???.];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    RUS=" ,???,????-???"];
                                                   OptionString=[ ,Invoice,Credit Memo] }
    { 12442;  ;Corrected Doc. No.  ;Code20        ;TableRelation=IF (Corrected Doc. Type=CONST(Invoice)) "Purch. Inv. Header" WHERE (Buy-from Vendor No.=FIELD(Buy-from Vendor No.))
                                                                 ELSE IF (Corrected Doc. Type=CONST(Credit Memo)) "Purch. Cr. Memo Hdr." WHERE (Buy-from Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=VAR
                                                                PurchInvHeader@1210000 : Record 122;
                                                                PurchCrMemoHeader@1210001 : Record 124;
                                                              BEGIN
                                                                IF ("Corrected Doc. No." <> xRec."Corrected Doc. No.") THEN BEGIN
                                                                  PurchLine.RESET;
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(Text018,FIELDCAPTION("Corrected Doc. No."));
                                                                  IF "Corrected Doc. No." = '' THEN BEGIN
                                                                    "Original Doc. Type" := "Original Doc. Type"::" ";
                                                                    "Original Doc. No." := '';
                                                                  END ELSE BEGIN
                                                                    CASE "Corrected Doc. Type" OF
                                                                      "Corrected Doc. Type"::Invoice:
                                                                        BEGIN
                                                                          PurchInvHeader.GET("Corrected Doc. No.");
                                                                          TESTFIELD("Currency Code",PurchInvHeader."Currency Code");
                                                                          TESTFIELD("Prices Including VAT",PurchInvHeader."Prices Including VAT");
                                                                          TESTFIELD("Agreement No.",PurchInvHeader."Agreement No.");
                                                                          IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchInvHeader."Posting Date") THEN
                                                                            ERROR(Text12405,"Posting Date",PurchInvHeader."Posting Date");
                                                                          IF PurchInvHeader."Corrective Document" THEN BEGIN
                                                                            "Original Doc. Type" := PurchInvHeader."Original Doc. Type";
                                                                            "Original Doc. No." := PurchInvHeader."Original Doc. No.";
                                                                          END ELSE BEGIN
                                                                            "Original Doc. Type" := "Original Doc. Type"::Invoice;
                                                                            "Original Doc. No." := "Corrected Doc. No.";
                                                                          END;
                                                                        END;
                                                                      "Corrected Doc. Type"::"Credit Memo":
                                                                        BEGIN
                                                                          PurchCrMemoHeader.GET("Corrected Doc. No.");
                                                                          TESTFIELD("Currency Code",PurchCrMemoHeader."Currency Code");
                                                                          TESTFIELD("Prices Including VAT",PurchCrMemoHeader."Prices Including VAT");
                                                                          TESTFIELD("Agreement No.",PurchCrMemoHeader."Agreement No.");
                                                                          IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchCrMemoHeader."Posting Date") THEN
                                                                            ERROR(Text12405,"Posting Date",PurchCrMemoHeader."Posting Date");
                                                                          IF PurchCrMemoHeader."Corrective Document" THEN BEGIN
                                                                            "Original Doc. Type" := PurchCrMemoHeader."Original Doc. Type";
                                                                            "Original Doc. No." := PurchCrMemoHeader."Original Doc. No.";
                                                                          END ELSE BEGIN
                                                                            "Original Doc. Type" := "Original Doc. Type"::"Credit Memo";
                                                                            "Original Doc. No." := "Corrected Doc. No.";
                                                                          END;
                                                                        END;
                                                                    END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Corrected Doc. No.;
                                                              RUS=????? ??????????? ???.] }
    { 12443;  ;Original Doc. Type  ;Option        ;CaptionML=[ENU=Original Doc. Type;
                                                              RUS=??? ??????? ???.];
                                                   OptionCaptionML=[ENU=" ,Invoice,Credit Memo";
                                                                    RUS=" ,???,????-???"];
                                                   OptionString=[ ,Invoice,Credit Memo] }
    { 12444;  ;Original Doc. No.   ;Code20        ;CaptionML=[ENU=Original Doc. No.;
                                                              RUS=????? ??????? ???.] }
    { 12445;  ;VAT Entry Type      ;Code15        ;OnValidate=VAR
                                                                VATEntryType@1210000 : Record 14949;
                                                              BEGIN
                                                                VATEntryType.ValidateSetOfVATEntryCodes("VAT Entry Type");
                                                              END;

                                                   OnLookup=VAR
                                                              VATEntryType@1210000 : Record 14949;
                                                            BEGIN
                                                              VATEntryType.LookupSetOfVATEntryCodes("VAT Entry Type");
                                                            END;

                                                   CaptionML=[ENU=VAT Entry Type;
                                                              RUS=??? ????? ???] }
    { 12446;  ;Corrective Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF "Corrective Doc. Type" <> "Corrective Doc. Type"::" " THEN
                                                                  CheckCorrectiveDocument;
                                                              END;

                                                   CaptionML=[ENU=Corrective Doc. Type;
                                                              RUS=??? ?????????? ???.];
                                                   OptionCaptionML=[ENU=" ,Correction,Revision";
                                                                    RUS=" ,??????,???????"];
                                                   OptionString=[ ,Correction,Revision] }
    { 12447;  ;Revision No.        ;Code20        ;OnValidate=BEGIN
                                                                IF "Revision No." <> '' THEN
                                                                  CheckCorrectiveDocument;
                                                              END;

                                                   CaptionML=[ENU=Revision No.;
                                                              RUS=????? ????] }
    { 12470;  ;Vendor Receipts No. ;Code20        ;OnValidate=BEGIN
                                                                "Vendor Shipment No." := "Vendor Receipts No.";
                                                              END;

                                                   CaptionML=[ENU=Vendor Receipts No.;
                                                              RUS=????? ????????? ??????] }
    { 12471;  ;Vendor Receipts Date;Date          ;CaptionML=[ENU=Vendor Receipts Date;
                                                              RUS=??? ????????? ??????] }
    { 12472;  ;Vendor VAT Invoice Date;Date       ;OnValidate=BEGIN
                                                                IF "Additional VAT Ledger Sheet" THEN
                                                                  EXIT;

                                                                IF ("Vendor VAT Invoice Date" <> 0D) AND ("Vendor VAT Invoice Date" < "Posting Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Date"),FIELDCAPTION("Posting Date"));
                                                                IF ("Vendor VAT Invoice Rcvd Date" <> 0D) AND ("Vendor VAT Invoice Date" <> 0D) AND
                                                                   ("Vendor VAT Invoice Rcvd Date" < "Vendor VAT Invoice Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Rcvd Date"),FIELDCAPTION("Vendor VAT Invoice Date"));
                                                              END;

                                                   CaptionML=[ENU=Vendor VAT Invoice Date;
                                                              RUS=??? ???-????? ??????] }
    { 12473;  ;Vendor VAT Invoice Rcvd Date;Date  ;OnValidate=BEGIN
                                                                IF "Additional VAT Ledger Sheet" THEN
                                                                  EXIT;

                                                                IF ("Vendor VAT Invoice Date" <> 0D) AND ("Vendor VAT Invoice Date" < "Posting Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Date"),FIELDCAPTION("Posting Date"));
                                                                IF ("Vendor VAT Invoice Rcvd Date" <> 0D) AND ("Vendor VAT Invoice Date" <> 0D) AND
                                                                   ("Vendor VAT Invoice Rcvd Date" < "Vendor VAT Invoice Date") THEN
                                                                  ERROR(Text12401,FIELDCAPTION("Vendor VAT Invoice Rcvd Date"),FIELDCAPTION("Vendor VAT Invoice Date"));
                                                              END;

                                                   CaptionML=[ENU=Vendor VAT Invoice Rcvd Date;
                                                              RUS=??? ??????? ???-????? ??????] }
    { 12474;  ;Vendor VAT Invoice No.;Code20      ;CaptionML=[ENU=Vendor VAT Invoice No.;
                                                              RUS=????? ???-????? ??????] }
    { 12480;  ;Outstanding Amount (LCY);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Outstanding Amount (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                     Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Outstanding Amount (LCY);
                                                              RUS=??? ?? ??????. ??????? (??.)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 12485;  ;Orig. Invoice No.   ;Code20        ;CaptionML=[ENU=Orig. Invoice No.;
                                                              RUS=????? ??????? ???];
                                                   Editable=No }
    { 12486;  ;Include In Sales VAT Ledger;Boolean;OnValidate=BEGIN
                                                                TESTFIELD("Additional VAT Ledger Sheet", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Include In Sales VAT Ledger;
                                                              RUS=??????? ? ??? ????? ????] }
    { 12490;  ;Agreement No.       ;Code20        ;TableRelation="Vendor Agreement".No. WHERE (Vendor No.=FIELD(Pay-to Vendor No.),
                                                                                               Active=CONST(Yes));
                                                   OnValidate=VAR
                                                                OldDimSetID@1210000 : Integer;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF (xRec."Agreement No." <> "Agreement No.") THEN BEGIN
                                                                  IF ("Agreement No." <> '') THEN BEGIN
                                                                    CheckCorrAgreementNo;
                                                                    IF HideValidationDialog OR (xRec."Agreement No." = '') THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Agreement No."));
                                                                    IF Confirmed THEN BEGIN
                                                                      PurchLine.SETRANGE("Document Type","Document Type");
                                                                      PurchLine.SETRANGE("Document No.","No.");
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                          PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                          PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                        END;
                                                                      IF PurchLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::Order THEN
                                                                          PurchLine.TESTFIELD("Quantity Received",0)
                                                                        ELSE
                                                                          PurchLine.TESTFIELD("Receipt No.",'');

                                                                      PurchLine.SETRANGE("Receipt No.");
                                                                      PurchLine.SETRANGE("Quantity Received");
                                                                      PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                        PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                        IF PurchLine.FIND('-') THEN
                                                                          PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                        PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                      END;

                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                          PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                          PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                        END;
                                                                      IF PurchLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                        ELSE
                                                                          PurchLine.TESTFIELD("Return Shipment No.",'');
                                                                      PurchLine.RESET;

                                                                      VendAgr.GET("Pay-to Vendor No.","Agreement No.");
                                                                      VendAgr.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                      VendAgr.TESTFIELD("Gen. Bus. Posting Group");
                                                                      IF "Posting Date" <> 0D THEN BEGIN
                                                                        IF VendAgr."Starting Date" > "Posting Date" THEN
                                                                          ERROR(Text12404,
                                                                            VendAgr.FIELDCAPTION("Starting Date"),
                                                                            FIELDCAPTION("Posting Date"));
                                                                        IF VendAgr."Expire Date" < "Posting Date" THEN
                                                                          ERROR(Text12403,
                                                                            VendAgr.FIELDCAPTION("Expire Date"),
                                                                            FIELDCAPTION("Posting Date"));
                                                                      END ELSE BEGIN
                                                                        IF VendAgr."Starting Date" > "Document Date" THEN
                                                                          ERROR(Text12404,
                                                                            VendAgr.FIELDCAPTION("Starting Date"),
                                                                            FIELDCAPTION("Document Date"));
                                                                        IF VendAgr."Expire Date" < "Document Date" THEN
                                                                          ERROR(Text12403,
                                                                            VendAgr.FIELDCAPTION("Expire Date"),
                                                                            FIELDCAPTION("Document Date"));
                                                                      END;

                                                                      IF "Gen. Bus. Posting Group" <> VendAgr."Gen. Bus. Posting Group" THEN
                                                                        VALIDATE("Gen. Bus. Posting Group",VendAgr."Gen. Bus. Posting Group");
                                                                      IF "VAT Bus. Posting Group" <> VendAgr."VAT Bus. Posting Group" THEN
                                                                        VALIDATE("VAT Bus. Posting Group",VendAgr."VAT Bus. Posting Group");
                                                                      IF "Vendor Posting Group" <> VendAgr."Vendor Posting Group" THEN
                                                                        VALIDATE("Vendor Posting Group",VendAgr."Vendor Posting Group");

                                                                      IF "Responsibility Center" <> VendAgr."Responsibility Center" THEN
                                                                        VALIDATE("Responsibility Center",UserSetupMgt.GetRespCenter(1,VendAgr."Responsibility Center"));
                                                                      IF "Location Code" <> VendAgr."Location Code" THEN
                                                                        VALIDATE("Location Code",UserSetupMgt.GetLocation(1,VendAgr."Location Code","Responsibility Center"));

                                                                      IF "Currency Code" <> VendAgr."Currency Code" THEN
                                                                        VALIDATE("Currency Code",VendAgr."Currency Code");
                                                                      IF "Language Code" <> VendAgr."Language Code" THEN
                                                                        VALIDATE("Language Code",VendAgr."Language Code");
                                                                      IF "Payment Terms Code" <> VendAgr."Payment Terms Code" THEN
                                                                        VALIDATE("Payment Terms Code",VendAgr."Payment Terms Code");
                                                                      IF "Purchaser Code" <> VendAgr."Purchaser Code" THEN
                                                                        VALIDATE("Purchaser Code",VendAgr."Purchaser Code");
                                                                      IF "Payment Method Code" <> VendAgr."Payment Method Code" THEN
                                                                        VALIDATE("Payment Method Code",VendAgr."Payment Method Code");
                                                                      IF "Prices Including VAT" <> VendAgr."Prices Including VAT" THEN
                                                                        VALIDATE("Prices Including VAT",VendAgr."Prices Including VAT");
                                                                      VALIDATE("External Agreement No.",VendAgr."External Agreement No.");

                                                                      IF (xRec."Currency Code" <> "Currency Code") OR
                                                                         (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                         (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                      THEN
                                                                        RecreatePurchLines(FIELDCAPTION("Agreement No."));

                                                                      OldDimSetID := "Dimension Set ID";
                                                                      "Dimension Set ID" :=
                                                                        VendAgr.GetDefaultDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                                      UpdateAllLineDim("Dimension Set ID",OldDimSetID);

                                                                      UpdatePurchLines(FIELDCAPTION("Agreement No."));
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    HideValidationDialog := TRUE;
                                                                    VALIDATE("Pay-to Vendor No.");
                                                                  END;
                                                                END ELSE
                                                                  "Agreement No." := xRec."Agreement No.";
                                                              END;

                                                   CaptionML=[ENU=Agreement No.;
                                                              RUS=????? ???????] }
    { 12491;  ;External Agreement No.;Text30      ;CaptionML=[ENU=External Agreement No.;
                                                              RUS=????? ?????? ???????] }
    { 12498;  ;Additional VAT Ledger Sheet;Boolean;OnValidate=BEGIN
                                                                TESTFIELD("Include In Sales VAT Ledger", FALSE);
                                                              END;

                                                   CaptionML=[ENU=Additional VAT Ledger Sheet;
                                                              RUS=?????????? ???? ????? ???] }
    { 12499;  ;Corrected Document Date;Date       ;CaptionML=[ENU=Corrected Document Date;
                                                              RUS=??? ??????????? ??????] }
    { 60000;  ;Record ID           ;Integer       ;AutoIncrement=Yes;
                                                   CaptionML=[ENU=Record ID;
                                                              RUS=?????? ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.                      }
    {    ;Incoming Document Entry No.              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to print receipt %1?;RUS=???????? ????????? %1?';
      Text001@1001 : TextConst 'ENU=Do you want to print invoice %1?;RUS=???????? ??? %1?';
      Text002@1002 : TextConst 'ENU=Do you want to print credit memo %1?;RUS=???????? ????-???? %1?';
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;RUS=????? ??????????? %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;RUS=???????? %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;RUS=???? %1 ??????????, ?????? ? ?????? ???? ???? ??? ????? ???.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more sales orders.;RUS=????? ???????? %1, ?????? ??? ????? ??? ? ???????? ?? ?????.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;RUS=%1 ????? %2 ? ???? %3.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;RUS=???????? ??????????';
      Text009@1009 : TextConst 'ENU="Deleting this document will cause a gap in the number series for receipts. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ?????????. "';
      Text010@1010 : TextConst 'ENU=An empty receipt %1 will be created to fill this gap in the number series.\\;RUS=??? ?????????? ???? ? ?? ????? ??? ????? ????? ????????? %1.\\';
      Text011@1011 : TextConst 'ENU=Do you want to continue?;RUS=?????????';
      Text012@1012 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted invoices. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ?????? ???. "';
      Text013@1013 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\;RUS=??? ?????????? ???? ? ?? ????? ??? ???? ???? ????? ??? %1.\\';
      Text014@1014 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted credit memos. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ?????? ????-???. "';
      Text015@1015 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\;RUS=??? ?????????? ???? ? ?? ????? ??? ????? ????? ?????? ????-??? %1.\\';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\;RUS=?? ???????? %1, ???????? ???? ????? ???? ?????, ? ???? ???? ?????, ??????? ?? ????? ????? ? ?????????, ???? ?????.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.;RUS=??? ? ??? ???????? %1, ???????? ????? ???????? ???? ?????.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\;RUS=%1 ???????? ? ????????? ?????, ?? ?? ???????? ? ????????? ????? ?????.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;RUS=???????? ?????? ???????? ???????? ???? ?????.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.;RUS=????????? ????? ???????? ?? ?????? ????, ?????????? ?? ???? ? ? ????? ?????.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;RUS=???????? ???? ???????';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;RUS=???????? ?????? ??????????. ??? ???? ????? ?? ?? %1 %2.';
      Text024@1023 : TextConst 'ENU=Do you want to print return shipment %1?;RUS=???????? ?????. ???. ????????? %1?';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";RUS="???? %1 ????????. ????? ????????, ?? ?????? ??? ????? ????? ? ????? ? ????????, ????? ??? ???????? ???????? ??????. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;RUS=???????? ???? %2 ? ????? ? ?????? ? ???? ??????? %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;RUS=??? ???? ??? ?? ?? %1 %2.';
      Text029@1028 : TextConst 'ENU="Deleting this document will cause a gap in the number series for return shipments. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ?????. ???. ?????????. "';
      Text030@1029 : TextConst 'ENU=An empty return shipment %1 will be created to fill this gap in the number series.\\;RUS=??? ?????????? ??? ???? ? ?? ????? ??? ????? ????? ?????. ???. ????????? %1.\\';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\;RUS=?? ???????? %1\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?;RUS=???????? ?????';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      ShipToAddr@1044 : Record 222;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      GenJnILine@1055 : Record 81;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      VendAgr@1210001 : Record 14901;
      NoSeriesMgt@1060 : Codeunit 396;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      PurchPost@1063 : Codeunit 90;
      VendEntrySetApplID@1064 : Codeunit 111;
      DimMgt@1065 : Codeunit 408;
      ApprovalMgt@1082 : Codeunit 439;
      UserSetupMgt@1066 : Codeunit 5700;
      ArchiveManagement@1074 : Codeunit 5063;
      DocSignMgt@1210002 : Codeunit 12420;
      ReservePurchLine@1081 : Codeunit 99000834;
      ApplyVendEntries@1068 : Page 233;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;RUS=????? ???????? %1, ????? ????????? %2.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;RUS=????? %1 %2 ?? ??? ? ??????? %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;RUS=????? %1 %2 ?????? ? ???????, ???? ?? ??????? ?????? %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;RUS=????? %1 %2 ?? ??? ? ???????.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";RUS="????? ???????? ???? %1, ?????? %2 %3 ????? %4 = %5, ? %6 ? ????? %7 %8."';
      Text041@1182 : TextConst 'ENU=The purchase %1 %2 has item tracking. Do you want to delete it anyway?;RUS=??? ????? %1 %2 ???????? ??????? ???. ?? ??? ??????';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;RUS=??? ???????? %1, ???????? ?????? ?????? ???????.';
      Text043@1083 : TextConst 'ENU=Do you want to print prepayment invoice %1?;RUS=???????? ??? ?? ???????? %1?';
      Text044@1085 : TextConst 'ENU=Do you want to print prepayment credit memo %1?;RUS=???????? ????-???? ???????? %1?';
      Text045@1086 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment invoices. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ??? ?? ????????. "';
      Text046@1087 : TextConst 'ENU=An empty prepayment invoice %1 will be created to fill this gap in the number series.\\;RUS=??? ????????? ???? ? ?? ?????, ??? ???? ???? ??? %1 ?? ????????.\\';
      Text047@1088 : TextConst 'ENU="Deleting this document will cause a gap in the number series for prepayment credit memos. ";RUS="???????? ??? ?????? ?????? ? ????? ? ?? ????? ??? ????-??? ????????. "';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;RUS=%1 ?????? ?? ?????? ?? ?? %2 %3.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\;RUS=??? ??? ?????? ???????? ????????. ??? ???? ??????, ?? ?????? ????????? ?????? ? ??????? ???.\\';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;RUS=??, ????????, ???????? ???????.\\???????? ?????';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.;RUS=???? %1 ? ?????? ?? ????? %2 ?????? ????? ? ?? ??????, ?? ? ? ?????? ?? ????? %3.';
      NameAddressDetails@1093 : Text[512];
      DropShptNameAddressDetails@1094 : Text[512];
      SpecOrderNameAddressDetails@1121 : Text[512];
      UpdateDocumentDate@1120 : Boolean;
      Text053@1095 : TextConst 'ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.;RUS=??? ?????? ?? %1 ? ????? %2 ???????? ????????? ?????? ???.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;RUS=? ?????? ?? %1 ? ????? %2 ???? ????????? ?????? ????????.';
      ChangeCurrencyQst@1073 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?;RUS=? ??? ????????? %1 ???????? ???? ????? ???? ?????, ? ???? ????? ???? ???? ?????, ??????? ?? ????? ??????? ?? ?????????. ????? ??????????? ???????? ?????? ? ?? ??????.\\???????? %1?';
      Text12400@1210000 : TextConst 'ENU=Document No. %1 does not exist for Vendor No. %2.;RUS=????? ?????? %1 ?? ??????? ??? ???? ?????? %2.';
      Text12401@1470000 : TextConst 'ENU=%1 cannot be less then %2;RUS=%1 ?? ????? ???? ????? %2';
      Text12402@1210003 : TextConst 'ENU=You can not update %1 while %2 is not blank.;RUS=????? ???????? %1, ???? %2 ?? ????? ?????.';
      Text12403@1210004 : TextConst 'ENU=Agreement %1 should be no earlier than %2.;RUS=??????? %1 ?????? ???? ?????? ?? ??? %2.';
      Text12404@1210005 : TextConst 'ENU=Agreement %1 should be no later than %2.;RUS=??????? %1 ?????? ???? ?????? ?? ????? %2.';
      Text12405@1210006 : TextConst 'ENU=Posting Date %1 should be no earlier than %2.;RUS=??? ??? %1 ?? ????? ???? ??? %2.';

    PROCEDURE InitRecord@10();
    BEGIN
      PurchSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN BEGIN
              IF "Empl. Purchase" = FALSE THEN
                "Posting No. Series" := "No. Series"
              ELSE
                "Posting No. Series" := PurchSetup."Advance Statement Nos."
            END ELSE
              IF "Posting No. Series" = '' THEN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            "Include In Sales VAT Ledger" := TRUE;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
            IF PurchSetup."Return Shipment on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order"] THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      PurchSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          PurchSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            IF "Empl. Purchase" THEN
              PurchSetup.TESTFIELD("Advance Statement Nos.")
            ELSE BEGIN
              PurchSetup.TESTFIELD("Invoice Nos.");
              PurchSetup.TESTFIELD("Posted Invoice Nos.");
            END;
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PurchSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(PurchSetup."Order Nos.");
        "Document Type"::Invoice:
          IF "Empl. Purchase" THEN
            EXIT(PurchSetup."Advance Statement Nos.")
          ELSE
            EXIT(PurchSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(PurchSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      PurchPost.TestDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009 +
             Text010 +
             Text011,TRUE,
             PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012 +
             Text013 +
             Text011,TRUE,
             PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014 +
             Text015 +
             Text011,TRUE,
             PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text011,TRUE,
             ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text044 +
             Text045 +
             Text011,TRUE,
             PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text046 +
             Text047 +
             Text011,TRUE,
             PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      PurchLineTmp@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        IF HideValidationDialog THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          MODIFY;

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              PurchLineTmp := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                PurchLine.MODIFY;
              END;
              PurchLineTmp.INSERT;
            UNTIL PurchLine.NEXT = 0;

            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            PurchLine.DELETEALL(TRUE);

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            PurchLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF PurchLineTmp."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,PurchLineTmp.Type);
                IF PurchLineTmp."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,PurchLineTmp.Description);
                  PurchLine.VALIDATE("Description 2",PurchLineTmp."Description 2");
                  PurchLine.INSERT;
                END ELSE BEGIN
                  PurchLine.VALIDATE("No.",PurchLineTmp."No.");
                  IF PurchLine.Type <> PurchLine.Type::" " THEN
                    CASE TRUE OF
                      PurchLineTmp."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Sales Order No.",
                            PurchLineTmp."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := PurchLineTmp."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := PurchLineTmp."Sales Order No.";
                          PurchLine."Sales Order Line No." := PurchLineTmp."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      PurchLineTmp."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Special Order Sales No.",
                            PurchLineTmp."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := PurchLineTmp."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := PurchLineTmp."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := PurchLineTmp."Special Order Sales Line No.";
                          PurchLine.INSERT;

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",PurchLineTmp."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",PurchLineTmp."Variant Code");
                        PurchLine."Prod. Order No." := PurchLineTmp."Prod. Order No.";
                        IF PurchLine."Prod. Order No." <> '' THEN BEGIN
                          PurchLine.Description := PurchLineTmp.Description;
                          PurchLine.VALIDATE("VAT Prod. Posting Group",PurchLineTmp."VAT Prod. Posting Group");
                          PurchLine.VALIDATE("Gen. Prod. Posting Group",PurchLineTmp."Gen. Prod. Posting Group");
                          PurchLine.VALIDATE("Expected Receipt Date",PurchLineTmp."Expected Receipt Date");
                          PurchLine.VALIDATE("Requested Receipt Date",PurchLineTmp."Requested Receipt Date");
                          PurchLine.VALIDATE("Qty. per Unit of Measure",PurchLineTmp."Qty. per Unit of Measure");
                        END;
                        IF (PurchLineTmp."Job No." <> '') AND (PurchLineTmp."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",PurchLineTmp."Job No.");
                          PurchLine.VALIDATE("Job Task No.",PurchLineTmp."Job Task No.");
                          PurchLine."Job Line Type" := PurchLineTmp."Job Line Type";
                        END;
                        IF PurchLineTmp.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                        IF "Currency Code" = xRec."Currency Code" THEN
                          PurchLine.VALIDATE("Direct Unit Cost",PurchLineTmp."Direct Unit Cost");
                        PurchLine."Routing No." := PurchLineTmp."Routing No.";
                        PurchLine."Routing Reference No." := PurchLineTmp."Routing Reference No.";
                        PurchLine."Operation No." := PurchLineTmp."Operation No.";
                        PurchLine."Work Center No." := PurchLineTmp."Work Center No.";
                        PurchLine."Prod. Order Line No." := PurchLineTmp."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := PurchLineTmp."Overhead Rate";
                        PurchLine.INSERT;
                      END;
                    END;
                END;
                ExtendedTextAdded := FALSE;

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLineTmp."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",PurchLineTmp."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",PurchLineTmp."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL PurchLineTmp.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            PurchLineTmp.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF PurchLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineTmp."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp.SETRANGE(Type);
            PurchLineTmp.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100]);
    VAR
      UpdateConfirmed@1002 : Boolean;
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF NOT GUIALLOWED THEN
        UpdateConfirmed := TRUE
      ELSE
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Requested Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Promised Receipt Date"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Lead Time Calculation"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Inbound Whse. Handling Time"):
            BEGIN
              UpdateConfirmed :=
                CONFIRM(
                  STRSUBSTNO(
                    Text032 +
                    Text033,ChangedFieldName));
              IF UpdateConfirmed THEN
                ConfirmResvDateConflict;
            END;
          FIELDCAPTION("Prepayment %"):
            UpdateConfirmed :=
              CONFIRM(
                STRSUBSTNO(
                  Text032 +
                  Text033,ChangedFieldName));
        END;

      PurchLine.LOCKTABLE;
      MODIFY;

      REPEAT
        xPurchLine := PurchLine;
        CASE ChangedFieldName OF
          FIELDCAPTION("Expected Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
          FIELDCAPTION("Currency Factor"):
            IF PurchLine.Type <> PurchLine.Type::" " THEN
              PurchLine.VALIDATE("Direct Unit Cost");
          FIELDCAPTION("Transaction Type"):
            PurchLine.VALIDATE("Transaction Type","Transaction Type");
          FIELDCAPTION("Transport Method"):
            PurchLine.VALIDATE("Transport Method","Transport Method");
          FIELDCAPTION("Entry Point"):
            PurchLine.VALIDATE("Entry Point","Entry Point");
          FIELDCAPTION(Area):
            PurchLine.VALIDATE(Area,Area);
          FIELDCAPTION("Transaction Specification"):
            PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
          FIELDCAPTION("Requested Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
          FIELDCAPTION("Prepayment %"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Prepayment %","Prepayment %");
          FIELDCAPTION("Promised Receipt Date"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
          FIELDCAPTION("Lead Time Calculation"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
          FIELDCAPTION("Inbound Whse. Handling Time"):
            IF UpdateConfirmed AND (PurchLine."No." <> '') THEN
              PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
          FIELDCAPTION("Agreement No."):
            IF PurchLine."No." <> '' THEN
            PurchLine.VALIDATE("Agreement No.","Agreement No.");
        END;
        PurchLine.MODIFY(TRUE);
        ReservePurchLine.VerifyChange(PurchLine,xPurchLine);
      UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050 + Text011,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT;

      IF ("Location Code" <> '') AND
         Location.GET("Location Code") AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text041,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Buy-from Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Buy-from Contact No." := ContBusRel."Contact No."
          ELSE
            "Buy-from Contact No." := '';
        END;
        "Buy-from Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text051) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    PROCEDURE JobUpdatePurchLines@28();
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdatePricesFromJobJnlLine;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          "Ship-to Name" := SalesHeader."Ship-to Name";
          "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
          "Ship-to Address" := SalesHeader."Ship-to Address";
          "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
          "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
          "Ship-to City" := SalesHeader."Ship-to City";
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(SalesHeader,Rec) THEN BEGIN
        IF ApprovalMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text053,"Document Type","No."));
        IF ApprovalMgt.TestPurchasePayment(Rec) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.INIT;
      IF ApprovalMgt.PrePostApprovalCheck(SalesHeader,Rec) THEN BEGIN
        IF ApprovalMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF ApprovalMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE CheckDropShptAddressDetails@79(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      NameAddressDetails := DropShptNameAddressDetails;
      DropShptNameAddressDetails :=
        SalesHeader."Ship-to Name" + SalesHeader."Ship-to Name 2" +
        SalesHeader."Ship-to Address" + SalesHeader."Ship-to Address 2" +
        SalesHeader."Ship-to Post Code" + SalesHeader."Ship-to City" +
        SalesHeader."Ship-to Contact";
      IF NameAddressDetails = '' THEN
        NameAddressDetails := DropShptNameAddressDetails;
      EXIT(NameAddressDetails = DropShptNameAddressDetails);
    END;

    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine3@1003 : Record 39;
      LocationCode@1004 : Record 14;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine3.RESET;
        PurchLine3.SETRANGE("Document Type","Document Type"::Order);
        PurchLine3.SETRANGE("Document No.","No.");
        IF NOT PurchLine3.ISEMPTY THEN BEGIN
          LocationCode.GET("Location Code");
          IF "Ship-to Name" <> LocationCode.Name THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> LocationCode."Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> LocationCode.Address THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> LocationCode."Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> LocationCode."Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> LocationCode.City THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> LocationCode.Contact THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
      END;
    END;

    PROCEDURE CheckSpecOrderAddressDetails@82(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      LocationCode@1001 : Record 14;
    BEGIN
      NameAddressDetails := SpecOrderNameAddressDetails;
      IF LocationCode.GET(SalesHeader."Location Code") THEN
        SpecOrderNameAddressDetails :=
          LocationCode.Name + LocationCode."Name 2" +
          LocationCode.Address + LocationCode."Address 2" +
          LocationCode."Post Code" + LocationCode.City +
          LocationCode.Contact
      ELSE BEGIN
        CompanyInfo.GET;
        SpecOrderNameAddressDetails :=
          CompanyInfo."Ship-to Name" + CompanyInfo."Ship-to Name 2" +
          CompanyInfo."Ship-to Address" + CompanyInfo."Ship-to Address 2" +
          CompanyInfo."Ship-to Post Code" + CompanyInfo."Ship-to City" +
          CompanyInfo."Ship-to Contact";
      END;
      IF NameAddressDetails = '' THEN
        NameAddressDetails := SpecOrderNameAddressDetails;
      EXIT(NameAddressDetails = SpecOrderNameAddressDetails);
    END;

    PROCEDURE ZeroAmountInLines@35();
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      PurchLine.SetPurchHeader(PurchHeader);
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'>0');
      PurchLine.SETFILTER(Quantity,'<>0');
      IF PurchLine.FINDSET(TRUE) THEN
        REPEAT
          PurchLine.Amount := 0;
          PurchLine."Amount Including VAT" := 0;
          PurchLine."VAT Base Amount" := 0;
          PurchLine.InitOutstandingAmount;
          PurchLine.MODIFY;
        UNTIL PurchLine.NEXT = 0;
    END;

    PROCEDURE RecalculatePurchLines@1470000(TargetAmount@1470000 : Decimal);
    VAR
      PurchLine@1470001 : Record 39;
      CalcAmount@1470002 : Decimal;
      Part@1470003 : Decimal;
      PurchLine1@1470004 : Record 39;
    BEGIN
      CALCFIELDS("Amount Including VAT");
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FIND('-') THEN BEGIN
        CalcAmount := 0;
        REPEAT
          IF (PurchLine.Type > 0) AND (PurchLine."No." <> '') THEN BEGIN
            Part := PurchLine."Amount Including VAT" / "Amount Including VAT";
            PurchLine.VALIDATE("Direct Unit Cost",ROUND(Part * TargetAmount));
            PurchLine.VALIDATE("Amount Including VAT",PurchLine."Direct Unit Cost");
            PurchLine.MODIFY;

            PurchLine1 := PurchLine;
            CalcAmount := CalcAmount + PurchLine."Direct Unit Cost";
          END;
        UNTIL PurchLine.NEXT = 0;
        IF (CalcAmount <> TargetAmount) AND (CalcAmount <> 0) THEN BEGIN
          PurchLine1.VALIDATE("Direct Unit Cost",PurchLine1."Direct Unit Cost" + TargetAmount - CalcAmount);
          PurchLine1.MODIFY;
        END;
      END;
    END;

    PROCEDURE ShowAttorneyLetters@1210000();
    VAR
      LetterOfAttorney@1210000 : Record 14905;
      LetterOfAttorneyList@1210001 : Page 14906;
    BEGIN
      LetterOfAttorney.FILTERGROUP(2);
      LetterOfAttorney.SETRANGE("Source Document Type","Document Type" + 1);
      LetterOfAttorney.SETRANGE("Source Document No.","No.");
      LetterOfAttorney.FILTERGROUP(0);
      LetterOfAttorneyList.SETTABLEVIEW(LetterOfAttorney);
      LetterOfAttorneyList.RUNMODAL;
    END;

    PROCEDURE CreateAttorneyLetter@1210001();
    VAR
      LetterOfAttorney@1210001 : Record 14905;
      LetterOfAttorneyCard@1210000 : Page 14905;
    BEGIN
      LetterOfAttorney.INIT;
      LetterOfAttorney."Source Document Type" := "Document Type" + 1;
      LetterOfAttorney."Source Document No." := "No.";
      LetterOfAttorney.INSERT(TRUE);

      LetterOfAttorney.FILTERGROUP(2);
      LetterOfAttorney.SETRANGE("Source Document Type","Document Type" + 1);
      LetterOfAttorney.SETRANGE("Source Document No.","No.");
      LetterOfAttorney.FILTERGROUP(0);
      LetterOfAttorneyCard.SetSourceDocument("Document Type","No.");
      LetterOfAttorneyCard.SETTABLEVIEW(LetterOfAttorney);
      LetterOfAttorneyCard.SETRECORD(LetterOfAttorney);
      LetterOfAttorneyCard.RUN;
    END;

    PROCEDURE CheckCorrPostingDate@1210003();
    VAR
      PurchInvHeader@1210000 : Record 122;
      PurchCrMemoHeader@1210001 : Record 124;
    BEGIN
      IF "Corrected Doc. No." <> '' THEN
        CASE "Corrected Doc. Type" OF
          "Corrected Doc. Type"::Invoice:
            BEGIN
              PurchInvHeader.GET("Corrected Doc. No.");
              IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchInvHeader."Posting Date") THEN
                ERROR(Text12405,"Posting Date",PurchInvHeader."Posting Date");
            END;
          "Corrected Doc. Type"::"Credit Memo":
            BEGIN
              PurchCrMemoHeader.GET("Corrected Doc. No.");
              IF ("Posting Date" <> 0D) AND ("Posting Date" < PurchCrMemoHeader."Posting Date") THEN
                ERROR(Text12405,"Posting Date",PurchCrMemoHeader."Posting Date");
            END;
        END;
    END;

    PROCEDURE CheckCorrAgreementNo@1210002();
    VAR
      PurchInvHeader@1210000 : Record 122;
      PurchCrMemoHeader@1210001 : Record 124;
    BEGIN
      IF "Corrected Doc. No." <> '' THEN
        CASE "Corrected Doc. Type" OF
          "Corrected Doc. Type"::Invoice:
            BEGIN
              PurchInvHeader.GET("Corrected Doc. No.");
              TESTFIELD("Agreement No.",PurchInvHeader."Agreement No.");
            END;
          "Corrected Doc. Type"::"Credit Memo":
            BEGIN
              PurchCrMemoHeader.GET("Corrected Doc. No.");
              TESTFIELD("Agreement No.",PurchCrMemoHeader."Agreement No.");
            END;
        END;
    END;

    PROCEDURE CheckCorrectiveDocument@1210004();
    BEGIN
      TESTFIELD("Corrective Document");
    END;

    BEGIN
    END.
  }
}


